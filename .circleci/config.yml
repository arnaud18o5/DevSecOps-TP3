version: 2.1

# Déclaration des configurations par défaut pour les workspaces
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/project

# Déclaration des exécutors par défaut pour les jobs
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2
        name: localhost

  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2-node
        name: localhost

  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2
        name: localhost

# Définition des jobs
jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Operating system: $(uname -a)"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace

  build-infisical:
    executor: php-executor
    steps:
      - checkout
      - run:
          name: Install Infisical CLI
          command: |
            curl -L https://infisical.com/install.sh | bash
      - run:
          name: Pull secrets from Infisical
          command: |
            infisical pull -m $INFISICAL_MACHINE_ID -s $INFISICAL_MACHINE_SECRET -e production
      - run:
          name: Use Secret for Testing
          command: |
            echo "The PASSWORD_TEST is: $PASSWORD_TEST"

  lint-phpcs:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install PHP_CodeSniffer
          command: composer require --dev "squizlabs/php_codesniffer=*"
      - run:
          name: Run PHP_CodeSniffer
          command: |
            ./vendor/bin/phpcs --standard=phpcs.xml --report-file=phpcs-report.txt --extensions=php --ignore=vendor/ .
      - store_artifacts:
          path: phpcs-report.txt
          destination: phpcs-report

  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run Security Checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit

  build-docker-image:
    executor: builder-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and Push Docker Image to GHCR
          command: |
            docker build -t myrepo/myimage:$TAG .
            docker push myrepo/myimage:$TAG

  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - run:
          name: Deploy to Staging
          command: |
            ssh -o StrictHostKeyChecking=no $STAGING_SSH_USER@$STAGING_SSH_HOST << EOF
            cd $STAGING_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer install --no-interaction --prefer-dist
            sudo service php-fpm restart
            EOF

# Configuration des workflows
workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - build-infisical
      - lint-phpcs:
          requires:
            - build-setup
      - security-check-dependencies:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup
      - deploy-ssh-staging:
          requires:
            - test-phpunit
