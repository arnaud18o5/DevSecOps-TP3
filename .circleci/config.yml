version: 2.1

# Déclaration des configurations par défaut pour les workspaces
persist_to_workspace: &persist_to_workspace
  persist_to_workspace:
    root: .
    paths:
      - .

attach_workspace: &attach_workspace
  attach_workspace:
    at: ~/project

# Déclaration des exécutors par défaut pour les jobs
executors:
  php-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2
        name: localhost

  builder-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2-node
        name: localhost

  simple-executor:
    resource_class: small
    shell: /bin/bash
    docker:
      - image: cimg/php:8.2
        name: localhost

  docker-executor:
    docker:
      - image: circleci/python:3.8

# Définition des jobs
jobs:
  debug-info:
    executor: php-executor
    steps:
      - run:
          name: Debug
          command: |
            echo "Current user: $USER"
            echo "Operating system: $(uname -a)"
            env

  build-setup:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: composer install --no-interaction --no-ansi --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - *persist_to_workspace

  build-infisical:
    executor: php-executor
    steps:
      - checkout
      - run:
          name: Install Infisical CLI
          command: |
            # Installer Infisical en utilisant curl
            curl -1sLf 'https://dl.cloudsmith.io/public/infisical/infisical-cli/setup.deb.sh' | sudo -E bash
            sudo apt-get update && sudo apt-get install -y infisical
      - run:
          name: Pull secrets from Infisical
          command: |
            export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_CLIENT_ID --client-secret=$INFISICAL_CLIENT_SECRET --silent --plain)
            infisical secrets --projectId=$INFISICAL_PROJECT_ID --env=dev --recursive
      - run:
          name: Display Secret (for testing purposes only)
          command: |
            # Display the secret just to verify it has been pulled correctly
            echo "The PASSWORD_TEST is: $PASSWORD_TEST"
      - run:
          name: Export secrets into env file
          command: |
            # Export the secrets into a .env file
            export INFISICAL_TOKEN=$(infisical login --method=universal-auth --client-id=$INFISICAL_CLIENT_ID --client-secret=$INFISICAL_CLIENT_SECRET --silent --plain)
            infisical export --projectId=$INFISICAL_PROJECT_ID --env=dev > .env
            echo "INFISICAL ENV FILE: $(cat .env)"
  

  security-check-dependencies:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Install local-php-security-checker
          command: |
            curl -L -o local-php-security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
            chmod +x local-php-security-checker
      - run:
          name: Run Security Checker
          command: ./local-php-security-checker --format=json --no-dev > security-report.json
      - store_artifacts:
          path: security-report.json
          destination: security-report

  test-phpunit:
    executor: php-executor
    steps:
      - *attach_workspace
      - run:
          name: Check if PHPUnit tests are present
          command: |
            if [ ! -f "phpunit.xml" ]; then
              echo "No PHPUnit tests found, skipping job."
              circleci step halt
            fi
      - run:
          name: Install PHPUnit
          command: composer require --dev phpunit/phpunit
      - run:
          name: Run PHPUnit
          command: ./vendor/bin/phpunit --testsuite=Unit

  build-docker-image:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t ghcr.io/${GHCR_USERNAME}/devsecops-tp3/devsecops:${CIRCLE_SHA1} -f Docker/Dockerfile .
      - run:
          name: Login to GHCR
          command: |
            echo $GHCR_TOKEN | docker login ghcr.io -u $GHCR_USERNAME --password-stdin
      - run:
          name: Push Docker Image
          command: |
            docker push ghcr.io/${GHCR_USERNAME}/devsecops-tp3/devsecops:${CIRCLE_SHA1}

  deploy-ssh-staging:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${STAGING_SSH_FINGERPRINT}"
      - run:
          name: Deploy to Staging
          command: |
            ssh -o StrictHostKeyChecking=no $STAGING_SSH_USER@$STAGING_SSH_HOST \<< EOF
            cd $STAGING_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer install --no-interaction --prefer-dist
            sudo service php-fpm restart
            EOF

  deploy-ssh-production:
    executor: simple-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "${PRODUCTION_SSH_FINGERPRINT}"
      - deploy:
          name: Deploy to AWS
          command: |
            set -x
            ssh -o StrictHostKeyChecking=no $PRODUCTION_SSH_USER@$PRODUCTION_SSH_HOST \<< EOF
            PHP_FPM_VERSION=$(php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1-2)
            cd $PRODUCTION_DEPLOY_DIRECTORY
            git pull origin $CIRCLE_BRANCH
            composer install --optimize-autoloader --no-interaction --prefer-dist
            (flock -w 10 9 || exit 1; sudo -S service php${PHP_FPM_VERSION}-fpm restart ) 9>/tmp/fpm.lock
            EOF
# Configuration des workflows
workflows:
  main_workflow:
    jobs:
      - debug-info
      - build-setup
      - build-docker-image
      - build-infisical
      - security-check-dependencies:
          requires:
            - build-setup
      - test-phpunit:
          requires:
            - build-setup
      # - deploy-ssh-staging:
      #     requires:
      #       - test-phpunit
      - deploy-ssh-production:
          requires:
            - test-phpunit
